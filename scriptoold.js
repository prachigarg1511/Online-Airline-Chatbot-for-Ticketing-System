function generateTicketPDF(order) {
  try {
    if(!order) order = window.store && window.store.order;
    if(!order) { console.warn('No order found for PDF generation'); return; }

    // Create QR content: include PNR, passenger name, flight no, date, route
    const qrText = `PNR:${order.pnr}|Name:${order.passenger?.fn || ''} ${order.passenger?.ln || ''}|Flight:${order.airline} ${order.flightNo}|Date:${order.date}|Route:${order.from}->${order.to}`;
    // generate QR using QRious to a dataURL
    const qr = new QRious({ value: qrText, size: 200 });
    const qrDataUrl = qr.toDataURL();

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF({unit:'pt', format:'a4'});

    const left = 40;
    let y = 60;
    doc.setFontSize(20);
    doc.text('SkySwift — E‑Ticket', left, y);
    y += 28;

    doc.setFontSize(11);
    doc.text(`PNR: ${order.pnr}`, left, y); y += 16;
    doc.text(`Passenger: ${order.passenger?.fn || ''} ${order.passenger?.ln || ''}`, left, y); y += 14;
    if(order.passenger?.em) { doc.text(`Email: ${order.passenger.em}`, left, y); y += 14; }
    doc.text(`Route: ${order.from} → ${order.to}`, left, y); y += 14;
    doc.text(`Flight: ${order.airline} ${order.flightNo}`, left, y); y += 14;
    doc.text(`Date: ${order.date}   Time: ${order.depart} → ${order.arrival}`, left, y); y += 14;
    const seatsText = (order.seats && order.seats.length) ? order.seats.join(', ') : 'Auto-assigned';
    doc.text(`Seats: ${seatsText}`, left, y); y += 16;
    if(order.cabin) { doc.text(`Cabin: ${order.cabin}`, left, y); y += 14; }
    doc.text(`Total Fare: ${order.total ? '₹' + order.total.toLocaleString('en-IN') : ''}`, left, y); y += 26;

    // Add QR on the right
    const qrX = 400; const qrY = 90; const qrSize = 120;
    // addImage: (imageData, format, x, y, width, height)
    doc.addImage(qrDataUrl, 'PNG', qrX, qrY, qrSize, qrSize);

    doc.setFontSize(10);
    doc.text('Generated by SkySwift demo. This is an auto-generated ticket.', left, y);

    // Save PDF
    doc.save(`Ticket_${order.pnr}.pdf`);
  } catch (e) {
    console.error('generateTicketPDF error', e);
    alert('Failed to generate PDF ticket. See console for details.');
  }
}

// add Download button on confirmation screen (if not present)
function ensureDownloadButton() {
  try {
    const conf = document.getElementById('confirmation');
    if(!conf) return;
    if(document.getElementById('downloadTicketBtn')) return;
    const btn = document.createElement('button');
    btn.id = 'downloadTicketBtn';
    btn.className = 'btn';
    btn.style.marginTop = '12px';
    btn.textContent = 'Download Ticket (PDF)';
    btn.onclick = function(){
      // use store.order if available
      const order = window.store && window.store.order ? window.store.order : window.order || null;
      if(!order) {
        // try to read from localStorage last trip
        const trips = JSON.parse(localStorage.getItem('skyswift_trips')||'[]');
        const last = trips[trips.length-1];
        if(last) generateTicketPDF(last);
        else alert('No booking found to download.');
        return;
      }
      generateTicketPDF(order);
    };
    // place button inside confirmation card
    const card = conf.querySelector('.card');
    if(card) card.appendChild(btn);
  } catch(e){ console.warn(e); }
}

// Ensure button exists when confirmation page is shown
document.addEventListener('click', function(e){
  // if navTo called with '#confirmation', ensure button
  if(e.target && e.target.getAttribute && e.target.getAttribute('href') === '#confirmation') {
    setTimeout(ensureDownloadButton, 120);
  }
});
window.addEventListener('DOMContentLoaded', function(){
  setTimeout(ensureDownloadButton, 400);
});

// also call generateTicketPDF automatically when booking completes -- patch existing navTo call if needed
// (Some existing code already attempts to call it; this is a safe double-call guard)



  // Replace these with your credentials
// Updated: allow any user to log in
function login() {
  const email = document.getElementById("loginEmail").value;
  const password = document.getElementById("loginPassword").value;

  if(email && password) {
    localStorage.setItem("isLoggedIn", "true");
    document.getElementById("loginOverlay").style.display = "none";
    document.getElementById("mainContent").style.display = "block"; // show project
  } else {
    alert("Incorrect email or password!");
  }
}

// Logout function
function logout() {
  localStorage.removeItem("isLoggedIn");
  location.reload();
}

// Check login status on page load
window.onload = function() {
  if(localStorage.getItem("isLoggedIn") === "true") {
    document.getElementById("loginOverlay").style.display = "none";
    document.getElementById("mainContent").style.display = "block";
  } else {
    document.getElementById("loginOverlay").style.display = "flex";
    document.getElementById("mainContent").style.display = "none";
  }
}
  // ======= UTIL =======
  const $ = (sel, root=document) => root.querySelector(sel);
  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
  const fmtTime = (t) => t.padStart(5,'0');
  const fmtINR = (n) => `₹${n.toLocaleString('en-IN')}`;
  const uid = () => Math.random().toString(36).slice(2,8).toUpperCase();
  const showToast = (msg) => { const el = $('#toast'); el.textContent = msg; el.style.display='block'; setTimeout(()=> el.style.display='none', 2000) }
  const navTo = (id) => { $$('main section').forEach(s=> s.style.display='none'); $(id).style.display='block';
    $$('.navlinks a').forEach(a=> a.classList.toggle('active', a.getAttribute('href')===id));
    history.replaceState(null, '', id);
  };

  // ======= STATE =======
  const store = {
    search: { from:'Delhi (DEL)', to:'Mumbai (BOM)', depart:'', ret:'', pax:1, cabin:'Economy' },
    flights: [],
    selected:null, // flight
    seats:new Set(),
    addons:{ bag:false, meal:false },
    passenger:{fn:'',ln:'',em:'',ph:''},
    order:null,
  };

  // ======= MOCK DATA =======
  const AIRLINES = ['IndiGo','Air India','Vistara','Akasa Air','SpiceJet'];
  const DURATIONS = [95, 110, 120, 130, 150, 165]; // in minutes
  function genFlights(from, to, date){
    const list = [];
    for(let i=0;i<14;i++){
      const airline = AIRLINES[Math.floor(Math.random()*AIRLINES.length)];
      const base = 3000 + Math.floor(Math.random()*12000);
      const stops = Math.random() < 0.7 ? 0 : 1;
      const departHour = 6 + Math.floor(Math.random()*14);
      const departMin = ['00','15','30','45'][Math.floor(Math.random()*4)];
      const duration = DURATIONS[Math.floor(Math.random()*DURATIONS.length)] + (stops?60:0);
      const price = base + (stops?800:0);
      const flightNo = airline.slice(0,2).toUpperCase() + (100 + Math.floor(Math.random()*900));
      list.push({
        id: uid(), airline, flightNo, from, to, date, depart:`${String(departHour).padStart(2,'0')}:${departMin}`,
        arrival: (()=>{ const d = new Date(`${date}T${String(departHour).padStart(2,'0')}:${departMin}:00`); d.setMinutes(d.getMinutes()+duration); return `${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}` })(),
        duration, stops, price
      });
    }
    return list;
  }

  // ======= RENDER HELPERS =======
  function renderTrending(){
    const today = new Date(); const date = today.toISOString().slice(0,10);
    const routes = [
      ['Delhi (DEL)','Mumbai (BOM)'],
      ['Bengaluru (BLR)','Delhi (DEL)'],
      ['Mumbai (BOM)','Goa (GOI)'],
      ['Chennai (MAA)','Hyderabad (HYD)'],
      ['Chennai (MAA)','Delhi (DEL)'],
      ['Delhi (DEL)', 'Goa (GOI)'],
      ['Jaipur (JAI)','Lucknow (LKO)'],
      ['Varanasi (VNS)', 'Udaipur (UDR)'],
      ['Ayodhya (AYJ)', 'Jodhpur (JDH)'],
      ['Chandigarh (IXC)','Shimla (SLV)'],
      ['Chandigarh(IXC)', 'Adampur (AIP)'],
      ['Mumbai (BOM)', 'Bengaluru (BlR)']
    ];
    $('#trending').innerHTML = routes.map(([from,to])=>{
      const f = genFlights(from,to,date)[0];
      return `<div class="result">
        <div class="meta"><div class="avatar">✈️</div>
          <div><div><b>${from}</b> → <b>${to}</b></div>
          <div class="dim">${f.airline} • ${f.depart} → ${f.arrival} • ${minsToH(f.duration)} • ${f.stops? '1 stop':'non‑stop'}</div></div>
        </div>
        <div class="dim">${date}</div>
        <div class="price">${fmtINR(f.price)}</div>
      </div>`;
    }).join('');
  }

  function minsToH(m){ const h=Math.floor(m/60), r=m%60; return `${h}h ${String(r).padStart(2,'0')}m`; }

  function renderAirlineChips(){
    const wrap = $('#airlines');
    wrap.innerHTML = AIRLINES.map(a=>`<button class="airline" data-airline="${a}">${a}</button>`).join('');
    wrap.addEventListener('click', (e)=>{
      if(e.target.matches('.airline')){ e.target.classList.toggle('active'); applyFilters(); }
    })
  }

  function renderResults(){
    const list = $('#resultsList');
    list.innerHTML = store.flights.map(f=>`<div class="result" data-id="${f.id}">
      <div class="meta"><div class="avatar">${f.airline.charAt(0)}</div>
        <div>
          <div class="t">${f.depart} → ${f.arrival}</div>
          <div class="dim">${f.airline} • ${f.flightNo} • ${minsToH(f.duration)} • ${f.stops? '1 stop':'non‑stop'}</div>
        </div>
      </div>
      <div class="dim">${store.search.date || store.search.depart}</div>
      <div style="display:flex;gap:8px;align-items:center;justify-content:flex-end">
        <div class="price">${fmtINR(f.price)}</div>
        <button class="btn" data-pick>Choose</button>
      </div>
    </div>`).join('');
  }

  function applyFilters(){
    const after = Number($('#depRange').value);
    $('#depAfter').textContent = `${String(after).padStart(2,'0')}:00`;
    const nonstop = $('#nonstop').checked;
    const maxP = Number($('#priceMax').value); $('#priceMaxVal').textContent = maxP.toLocaleString('en-IN');
    const selectedAirlines = $$('.airline.active').map(b=> b.dataset.airline);

    let filtered = store.flights.filter(f=> Number(f.depart.slice(0,2))>=after && f.price<=maxP);
    if(nonstop) filtered = filtered.filter(f=> f.stops===0);
    if(selectedAirlines.length) filtered = filtered.filter(f=> selectedAirlines.includes(f.airline));

    // sort
    const by = $('#sort').value;
    if(by==='price') filtered.sort((a,b)=> a.price-b.price);
    else if(by==='duration') filtered.sort((a,b)=> a.duration-b.duration);
    else if(by==='depart') filtered.sort((a,b)=> a.depart.localeCompare(b.depart));
    else filtered.sort((a,b)=> (a.stops - b.stops) || (a.duration - b.duration) || (a.price - b.price));

    $('#resultsList').innerHTML = filtered.map(f=>`<div class="result" data-id="${f.id}">
      <div class="meta"><div class="avatar">${f.airline.charAt(0)}</div>
        <div>
          <div class="t">${f.depart} → ${f.arrival}</div>
          <div class="dim">${f.airline} • ${f.flightNo} • ${minsToH(f.duration)} • ${f.stops? '1 stop':'non‑stop'}</div>
        </div>
      </div>
      <div class="dim">${store.search.date || store.search.depart}</div>
      <div style="display:flex;gap:8px;align-items:center;justify-content:flex-end">
        <div class="price">${fmtINR(f.price)}</div>
        <button class="btn" data-pick>Choose</button>
      </div>
    </div>`).join('');
  }

  function renderSummary(sidebar){
    const s = store.selected;
    const extras = (store.addons.bag?500:0) + (store.addons.meal?250:0);
    const seats = Array.from(store.seats).sort().join(', ') || 'Not selected';
    sidebar.innerHTML = `
      <h3>Trip summary</h3>
      <div class="row"><div>
        <div><b>${s.from}</b> → <b>${s.to}</b></div>
        <div class="dim">${s.airline} • ${s.flightNo} • ${minsToH(s.duration)} • ${s.stops? '1 stop':'non‑stop'}</div>
        <div class="dim">Depart ${store.search.date || store.search.depart} at ${s.depart}</div>
      </div>
      <div class="price">${fmtINR(s.price)}</div></div>
      <hr style="border-color:var(--hair);opacity:.5">
      <div class="row">
        <div>Seats <span class="dim">(${seats})</span></div>
        <div>${store.seats.size? fmtINR(0): '—'}</div>
      </div>
      <div class="row"><div>Extra baggage</div><div>${store.addons.bag? fmtINR(500): '—'}</div></div>
      <div class="row"><div>Meal</div><div>${store.addons.meal? fmtINR(250): '—'}</div></div>
      <div class="row total"><div>Total</div><div>${fmtINR(s.price + extras)}</div></div>
    `;
  }

  function renderSeatMap(){
    const wrap = $('#seatMap');
    const seats = [];
    for(let r=1;r<=10;r++){
      for(let c of 'ABCDEF'){
        seats.push(r + c);
      }
    }
    wrap.innerHTML = seats.map(code=>{
      const taken = Math.random()<.18; // some taken
      return `<button class="seat ${taken?'taken':''}" data-seat="${code}" ${taken?'disabled':''} aria-label="Seat ${code}">${code}</button>`
    }).join('');
  }

  function renderTrips(){
    const trips = JSON.parse(localStorage.getItem('skyswift_trips')||'[]');
    const list = $('#tripsList');
    if(!trips.length){ list.innerHTML = `<div class="dim">No trips yet.</div>`; return }
    list.innerHTML = trips.map(t=>`<div class="result">
      <div class="meta"><div class="avatar">✈️</div>
        <div>
          <div class="t">${t.from} → ${t.to}</div>
          <div class="dim">${t.airline} • ${t.flightNo} • ${t.date} ${t.depart}</div>
        </div>
      </div>
      <div class="price">${fmtINR(t.total)}</div>
      <div style="display:flex;gap:8px;justify-content:flex-end">
        <button class="btn ghost" data-view="${t.pnr}">View</button>
        <button class="btn" data-cancel="${t.pnr}">Cancel</button>
      </div>
    </div>`).join('');
  }

function showPage(pageId) {
  document.querySelectorAll('.page').forEach(page => {
    page.classList.add('hidden');
  });
  document.getElementById(pageId).classList.remove('hidden');
}

// Handle Clicks
document.querySelectorAll('[data-link]').forEach(link=> {link.addEventListener('click',e=>{
    e.preventDefault();
    const pageId=link.getAttribute('href').substring(1);
    showPage(pageId);
});
});

// Deep link on load
window.addEventListener('DOMContentLoaded', ()=>{const hash=location.hash || '#home';
    showPage(hash.substring(1));
})

function openLogin() {
  document.getElementById("loginModal").style.display = "flex";
}

function closeLogin() {
  document.getElementById("loginModal").style.display = "none";
}

// Close when clicking outside modal
window.onclick = function(event) {
  let modal = document.getElementById("loginModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
}


// ======= EVENTS =======
  $('#year').textContent = new Date().getFullYear();
  renderTrending();
  renderAirlineChips();

  // Search submit
  $('#searchForm').addEventListener('submit', (e)=>{
    e.preventDefault();
    const from = $('#from').value.trim();
    const to = $('#to').value.trim();
    const date = $('#depart').value || new Date().toISOString().slice(0,10);
    store.search = {from,to,date,ret:$('#return').value, pax: Number($('#pax').value), cabin: $('#cabin').value};
    store.flights = genFlights(from,to,date);
    $('#searchHint').textContent = `${store.flights.length} options found — tweak filters to refine.`;
    navTo('#results');
    renderResults();
    applyFilters();
    showToast('Results updated');
  });

  // Filters & sort
  $('#depRange').addEventListener('input', applyFilters);
  $('#nonstop').addEventListener('change', applyFilters);
  $('#priceMax').addEventListener('input', applyFilters);
  $('#sort').addEventListener('change', applyFilters);

  // Choose flight
  $('#resultsList').addEventListener('click', (e)=>{
    const pick = e.target.closest('[data-pick]');
    const card = e.target.closest('.result');
    if(pick && card){
      const id = card.dataset.id;
      store.selected = store.flights.find(f=> f.id===id);
      renderSeatMap();
      store.seats = new Set();
      $('#bag').checked = $('#meal').checked = false; store.addons={bag:false,meal:false};
      renderSummary($('#summary'));
      navTo('#passengers');
    }
  });

  // Seat selection
  $('#seatMap').addEventListener('click', (e)=>{
    if(!e.target.matches('.seat') || e.target.classList.contains('taken')) return;
    const seat = e.target.dataset.seat;
    if(store.seats.has(seat)){ store.seats.delete(seat); e.target.classList.remove('selected'); }
    else { store.seats.add(seat); e.target.classList.add('selected'); }
    renderSummary($('#summary'));
  });

  // Addons
  $('#bag').addEventListener('change', (e)=> { store.addons.bag = e.target.checked; renderSummary($('#summary')) });
  $('#meal').addEventListener('change', (e)=> { store.addons.meal = e.target.checked; renderSummary($('#summary')) });

  // Navigation
  $('#backToResults').addEventListener('click', ()=> navTo('#results'));

  $('#toPayment').addEventListener('click', ()=>{
    // simple validation
    const required = ['#fn','#ln','#em'];
    for(const sel of required){ if(!$(sel).value.trim()){ showToast('Please complete passenger details'); return } }
    store.passenger = { fn:$('#fn').value.trim(), ln:$('#ln').value.trim(), em:$('#em').value.trim(), ph:$('#ph').value.trim() };
    renderSummary($('#paySummary'));
    navTo('#payment');
  });

  $('#backToPassengers').addEventListener('click', ()=> navTo('#passengers'));

  // Payment
  $('#payNow').addEventListener('click', ()=>{
    if(!$('#tnc').checked){ showToast('Please accept terms & refund policy'); return }
    // rudimentary card checks
    if(!$('#ch').value || $('#cn').value.replace(/\s/g,'').length < 12){ showToast('Enter a valid card'); return }

    const extras = (store.addons.bag?500:0) + (store.addons.meal?250:0);
    const total = store.selected.price + extras;
    const pnr = uid();
    const order = { pnr, ...store.selected, date: store.search.date, total, passenger: store.passenger, seats: Array.from(store.seats) };
    store.order = order;

    // persist
    const trips = JSON.parse(localStorage.getItem('skyswift_trips')||'[]');
    trips.push(order); localStorage.setItem('skyswift_trips', JSON.stringify(trips));

    // confirmation
    $('#confDetails').innerHTML = `
      <div class="card" style="text-align:left">
        <div class="row">
          <div><b>${order.from}</b> → <b>${order.to}</b><div class="dim">${order.date} • ${order.depart} → ${order.arrival}</div></div>
          <div class="price">${fmtINR(order.total)}</div>
        </div>
        <div class="row">
          <div><b>Passenger</b><div class="dim">${order.passenger.fn} ${order.passenger.ln} • ${order.passenger.em}</div></div>
          <div><b>PNR</b><div>${order.pnr}</div></div>
        </div>
        <div><b>Seats</b><div class="dim">${order.seats.join(', ') || 'Auto‑assigned at check‑in'}</div></div>
      </div>`;

    navTo('#confirmation');
  });

  // Trips actions
  $('#tripsList').addEventListener('click', (e)=>{
    const cancel = e.target.closest('[data-cancel]');
    const view = e.target.closest('[data-view]');
    const trips = JSON.parse(localStorage.getItem('skyswift_trips')||'[]');
    if(cancel){
      const pnr = cancel.getAttribute('data-cancel');
      const idx = trips.findIndex(t=> t.pnr===pnr);
      if(idx>-1){ trips.splice(idx,1); localStorage.setItem('skyswift_trips', JSON.stringify(trips)); renderTrips(); showToast('Trip cancelled'); }
    }
    if(view){
      const pnr = view.getAttribute('data-view');
      const t = trips.find(t=> t.pnr===pnr);
      if(t){
        store.selected = t; store.search.date = t.date; renderSummary($('#summary'));
        $('#fn').value = t.passenger.fn; $('#ln').value = t.passenger.ln; $('#em').value = t.passenger.em; $('#ph').value = t.passenger.ph || '';
        navTo('#passengers');
      }
    }
     });

  // Basic router for top nav links
  document.addEventListener('click', (e)=>{
    const link = e.target.closest('[data-link]');
    if(link){ e.preventDefault(); const tgt = link.getAttribute('href'); navTo(tgt); if(tgt==='#mytrips') renderTrips(); }
  });

  // Theme toggle (demo)
  $('#btnTheme').addEventListener('click', ()=>{
    document.documentElement.classList.toggle('light');
    if(document.documentElement.classList.contains('light')){
      // light palette
      document.documentElement.style.setProperty('--bg','#f5f7ff');
      document.documentElement.style.setProperty('--bg-soft','#ffffff');
      document.documentElement.style.setProperty('--ink','#0f1830');
      document.documentElement.style.setProperty('--muted','#5a6aa3');
      document.documentElement.style.setProperty('--hair','#e6e9f6');
      document.documentElement.style.setProperty('--chip','#f0f3ff');
    } else {
      // back to dark
      document.documentElement.style.setProperty('--bg','#0b1221');
      document.documentElement.style.setProperty('--bg-soft','#121a2d');
      document.documentElement.style.setProperty('--ink','#e6ebff');
      document.documentElement.style.setProperty('--muted','#a5b3d9');
      document.documentElement.style.setProperty('--hair','#223055');
      document.documentElement.style.setProperty('--chip','#1a2542');
    }
  });

  // Deep link on load
  window.addEventListener('DOMContentLoaded', ()=>{
    const hash = location.hash || '#home';
    navTo(hash);
    if(hash==='#mytrips') renderTrips();
  });

  // script.js - SkySwift Assistant (All features)
// Requires jsPDF & qrious included in index.html via CDN

/* ---------------------
   Storage & State
   --------------------- */
const STORAGE = 'skyswift_bookings_v3';
let bookings = JSON.parse(localStorage.getItem(STORAGE) || '[]');
let loyaltyPoints = parseInt(localStorage.getItem('skyswift_points') || '0', 10) || 0;
window._seatMap = JSON.parse(localStorage.getItem('skyswift_seats') || '{}'); // seat occupancy map

/* ---------------------
   DOM refs
   --------------------- */
const chat = document.getElementById('chat');
const input = document.getElementById('input');
const send = document.getElementById('send');

const upiModal = document.getElementById('upiModal');
const upiQR = document.getElementById('upiQR');
const upiInfo = document.getElementById('upiInfo');
const upiCancel = document.getElementById('upiCancel');
const upiPaid = document.getElementById('upiPaid');

const paymentModal = document.getElementById('paymentModal');
const paymentTitle = document.getElementById('paymentTitle');
const paymentBody = document.getElementById('paymentBody');
const payCancel = document.getElementById('payCancel');
const payProceed = document.getElementById('payProceed');

/* ---------------------
   Helpers: chat UI
   --------------------- */
function bot(msg, opts={}) {
  const d = document.createElement('div');
  d.className = 'message bot';
  d.innerHTML = msg.replace(/\n/g,'<br>');
  chat.appendChild(d);
  chat.scrollTop = chat.scrollHeight;
  if(opts.quick) renderQuick(opts.quick);
}
function userMsg(text){
  const d = document.createElement('div');
  d.className = 'message user';
  d.textContent = text;
  chat.appendChild(d);
  chat.scrollTop = chat.scrollHeight;
}
function renderQuick(options){
  // options: array of {label, cmd}
  const container = document.createElement('div'); container.className='quick-row';
  options.forEach(o=>{
    const b=document.createElement('button'); b.className='chip'; b.textContent=o.label;
    b.onclick = ()=>{ userMsg(o.label); handleInput(o.cmd); };
    container.appendChild(b);
  });
  chat.appendChild(container);
  chat.scrollTop = chat.scrollHeight;
}

/* ---------------------
   Initial Menu (1-9 + extras)
   --------------------- */
function showMenu(){
  bot(
`👋 Welcome to ✈️ <strong>SkySwift</strong> — your virtual assistant!

✨ Core Options:
1️⃣ Book a Flight ✈️
2️⃣ Cancel a Flight ❌ (type: cancel T1234)
3️⃣ Where is my Flight 🛰️ (type: status T1234 or flight id)
4️⃣ Delay a Flight ⏱️ (type: delay FLT123)
5️⃣ Reschedule 🔄 (type: reschedule T1234)
6️⃣ View My Bookings 📑
7️⃣ Baggage Info 🧳
8️⃣ Refund Policy 💵
9️⃣ Check-in Info 🛄

🌟 Extras:
🔟 Contact Support 📞   🌦️ Weather (weather &lt;city&gt;)
🎟️ Apply Promo Code  🏅 Loyalty Points
💼 Extra baggage & insurance
💳 Payment methods & QR for UPI
🎯 Seat map selection (visual)

👉 Type a number (1–9) or a command (book, view, cancel T1234, promo, help).`,
{quick:[
  {label:'1️⃣ Book a Flight', cmd:'book'},
  {label:'6️⃣ View My Bookings', cmd:'view'},
  {label:'7️⃣ Baggage Info', cmd:'baggage'},
  {label:'🎟️ Promo', cmd:'promo'}
]});
}
showMenu();

/* ---------------------
   Core input handling
   --------------------- */
send.addEventListener('click', ()=>{ handleInput(input.value.trim()); input.value=''; input.focus(); });
input.addEventListener('keydown', (e)=>{ if(e.key === 'Enter'){ e.preventDefault(); send.click(); } });

function handleInput(raw){
  if(!raw) return;
  userMsg(raw);
  const text = raw.trim();

  // booking flow has priority (awaiting variable)
  if(awaitingStep) { handleBookingFlow(text); return; }

  const cmd = text.toLowerCase();
  if(cmd === 'help' || cmd === 'menu'){ showMenu(); return; }
  if(cmd === '1' || cmd === 'book'){ startBooking(); return; }
  if(cmd.startsWith('cancel ')){ const id = cmd.split(/\s+/)[1]; cancelTicket(id?.toUpperCase()); return; }
  if(cmd === '2' || cmd.startsWith('cancel')){ bot('To cancel, type: cancel T1234'); return; }
  if(cmd === '3' || cmd.startsWith('status') || cmd.includes('where is my flight')){ const id = cmd.split(/\s+/).slice(-1)[0]; whereIsFlight(id || 'FLIGHT1'); return; }
  if(cmd === '4' || cmd.startsWith('delay')){ const id = cmd.split(/\s+/)[1] || prompt('Enter flight id to delay:'); if(id) bot(`⏱️ Flight ${id} delayed (simulated).`); return; }
  if(cmd === '5' || cmd.startsWith('reschedule')){ const id = cmd.split(/\s+/)[1] || prompt('Enter ticket id to reschedule:'); if(id) reschedule(id.toUpperCase()); return; }
  if(cmd === '6' || cmd.includes('view')){ showBookings(); return; }
  if(cmd === '7' || cmd.includes('baggage')){ showBaggage(); return; }
  if(cmd === '8' || cmd.includes('refund')){ showRefund(); return; }
  if(cmd === '9' || cmd.includes('check-in')){ showCheckin(); return; }
  if(cmd.startsWith('weather ')){ const city = text.split(' ').slice(1).join(' '); fetchWeather(city); return; }
  if(cmd.includes('promo')){ bot('🎟️ Promo codes: FLY100 → ₹1000 off (apply during booking).'); return; }
  if(cmd.includes('points') || cmd.includes('loyalty')){ bot(`🏅 You have ${loyaltyPoints} loyalty points.`); return; }
  if(cmd.includes('support') || cmd.includes('contact')){ bot('📞 Support: 1800-123-456 | support@skyswift.example'); return; }

  // special: select <flightId> <time> <date> for simulated flights (optional)
  if(cmd.startsWith('select ')){ const parts = text.split(/\s+/).slice(1); selectFlight(parts); return; }

  bot("⚠️ Command not recognized. Type 'help' to show the menu.");
}

/* ---------------------
   Booking flow machine
   --------------------- */
let awaitingStep = null; // null or string naming step
let draft = null;
function startBooking(){
  draft = {
    ticketId: 'SKY' + Math.random().toString(36).slice(2,8).toUpperCase(),
    passengerName: '', age:null, gender:'', health:'No', pregnancy:'No',
    from:'', to:'', date:'', time:'', seats:1, seatsList:[], flightClass:'Economy',
    extraBaggageKg:0, insurance:false, promo:'', amount:0, paymentMethod:'', paymentDetails:{},
    transactionId:'', receiptId:''
  };
  bot('🛫 Booking — I will ask passenger details step-by-step.\nFirst: Passenger full name:');
  awaitingStep = 'name';
}
function handleBookingFlow(text){
  // each case populates draft and advances
  const t = text.trim();
  if(awaitingStep === 'name'){ if(!t){ bot('Please enter full name:'); return; } draft.passengerName = t; bot('Age (number):'); awaitingStep='age'; return; }
  if(awaitingStep === 'age'){ const n=parseInt(t,10); if(!n){ bot('Enter valid age (number):'); return; } draft.age=n; bot('Gender (Male/Female/Other):'); awaitingStep='gender'; return; }
  if(awaitingStep === 'gender'){ draft.gender = t || 'Other'; bot('Any health conditions? (No or describe)'); awaitingStep='health'; return; }
  if(awaitingStep === 'health'){ draft.health = t || 'No'; bot('Is the passenger pregnant? (Yes/No)'); awaitingStep='pregnancy'; return; }
  if(awaitingStep === 'pregnancy'){ draft.pregnancy = /^y/i.test(t)? 'Yes':'No'; bot('Departure city:'); awaitingStep='from'; return; }
  if(awaitingStep === 'from'){ draft.from = t || ''; bot('Destination city:'); awaitingStep='to'; return; }
  if(awaitingStep === 'to'){ draft.to = t || ''; bot('Travel date (DD-MM-YYYY):'); awaitingStep='date'; return; }
  if(awaitingStep === 'date'){ draft.date = t || ''; bot('Preferred departure time (HH:MM):'); awaitingStep='time'; return; }
  if(awaitingStep === 'time'){ draft.time = t || ''; bot('How many seats? (number)'); awaitingStep='seats'; return; }
  if(awaitingStep === 'seats'){ const s = parseInt(t,10) || 1; draft.seats = s; bot(`Choose class: Economy / Business / First`); awaitingStep='class'; return; }
  
  if(awaitingStep === 'payment'){
    draft.paymentMethod = t;
    draft.amount = 4500 + (Math.random()*2000|0); // mock amount
    draft.transactionId = 'TXN' + Math.random().toString(36).slice(2,8).toUpperCase();
    draft.pnr = 'PNR' + Math.random().toString(36).slice(2,8).toUpperCase();
    bookings.push(draft);
    localStorage.setItem(STORAGE, JSON.stringify(bookings));
    bot(`✅ Booking confirmed!\nPNR: ${draft.pnr}\nAmount: ₹${draft.amount}\nTransaction: ${draft.transactionId}`);
    bot(`<button class="btn" onclick="generateTicketPDF(${JSON.stringify(draft)})">🧾 Download Ticket (PDF)</button>`);
    awaitingStep = null;
    draft = null;
    return;
  }

  if(awaitingStep === 'class'){ draft.flightClass = t || 'Economy';
    // compute base amount per seat
    let base = 4000;
    if(/business/i.test(draft.flightClass)) base = Math.round(base * 1.6);
    if(/first/i.test(draft.flightClass)) base = Math.round(base * 2.6);
    draft.amount = base * draft.seats;
    bot(`Estimated fare ₹${draft.amount}. Extra baggage? (Yes/No)`); awaitingStep='extraBaggageQuery'; return;
  }
  if(awaitingStep === 'extraBaggageQuery'){
    if(/^y/i.test(t)){ bot('Enter extra baggage in kg (number):'); awaitingStep='extraBaggage'; }
    else { draft.extraBaggageKg = 0; bot('Add travel insurance for ₹500? (Yes/No)'); awaitingStep='insurance'; }
    return;
  }
  if(awaitingStep === 'extraBaggage'){
    const kg = parseInt(t,10) || 0; draft.extraBaggageKg = kg;
    const fee = Math.ceil(kg/5) * 500; draft.amount += fee;
    bot(`Added extra baggage fee ₹${fee}. Add travel insurance for ₹500? (Yes/No)`); awaitingStep='insurance'; return;
  }
  if(awaitingStep === 'insurance'){
    draft.insurance = /^y/i.test(t);
    if(draft.insurance) draft.amount += 500;
    bot('Have a promo code? (type code or no)'); awaitingStep='promo'; return;
  }
  if(awaitingStep === 'promo'){
    if(t && t.toUpperCase()==='FLY100'){ draft.promo='FLY100'; draft.amount = Math.max(0, draft.amount - 1000); bot('Promo applied: ₹1000 off!'); }
    bot(`Total payable: ₹${draft.amount}. Choose payment method:\nPaytm / HDFC Debit Card / Credit Card / UPI / Bank Transfer`);
    awaitingStep='paymentMethod';
    return;
  }
  if(awaitingStep === 'paymentMethod'){
    draft.paymentMethod = t;
    // route to specific payment UI
    handlePaymentChoice(t);
    return;
  }

  // if seats modal was open before, confirmation handled elsewhere
}

/* ---------------------
   Seat selection (inline)
   --------------------- */
function openSeatGridForSelection(){
  // build seat grid inserted as bot message
  const container = document.createElement('div'); container.className='message bot';
  container.innerHTML = `<div><strong>Select ${draft.seats} seat(s)</strong></div>`;
  const grid = document.createElement('div'); grid.className='seat-grid';
  const flightKey = `${draft.from}|${draft.to}|${draft.date}|${draft.time}`;
  const bookedSet = new Set(window._seatMap[flightKey] || []);
  for(let i=1;i<=36;i++){
    const seat = document.createElement('div'); seat.className='seat'; seat.textContent = i;
    if(bookedSet.has(i)) seat.classList.add('booked');
    seat.onclick = ()=>{
      if(seat.classList.contains('booked')) return;
      if(seat.classList.contains('selected')) { seat.classList.remove('selected'); }
      else {
        const currently = grid.querySelectorAll('.selected').length;
        if(currently >= draft.seats){ alert(`You can select ${draft.seats}`); return; }
        seat.classList.add('selected');
      }
    };
    grid.appendChild(seat);
  }
  const confirm = document.createElement('button'); confirm.className='btn'; confirm.textContent='Confirm Seats';
  confirm.style.marginTop='8px';
  confirm.onclick = ()=>{
    const selectedEls = Array.from(grid.querySelectorAll('.selected'));
    if(selectedEls.length !== draft.seats){ alert(`Select exactly ${draft.seats} seat(s)`); return; }
    draft.seatsList = selectedEls.map(el=>parseInt(el.textContent,10));
    // mark seats booked
    window._seatMap[flightKey] = (window._seatMap[flightKey] || []).concat(draft.seatsList);
    localStorage.setItem('skyswift_seats', JSON.stringify(window._seatMap));
    container.remove();
    bot(`✅ Seats chosen: ${draft.seatsList.join(', ')}. Now choose payment method: Paytm / HDFC Debit Card / Credit Card / UPI / Bank Transfer`);
    awaitingStep = 'paymentMethod';
  };
  container.appendChild(grid);
  container.appendChild(confirm);
  chat.appendChild(container);
  chat.scrollTop = chat.scrollHeight;
}

/* ---------------------
   Payment flows
   --------------------- */
function handlePaymentChoice(methodText){
  const m = methodText.toLowerCase();
  if(m.includes('paytm')){
    showPaymentModal('Paytm', `
      <div class="field"><div class="label">Mobile (Paytm)</div><input id="pm_mobile" class="input-sm" placeholder="10-digit mobile" /></div>
      <div class="small-muted">We'll simulate an OTP (enter 1234 to confirm).</div>
    `, ()=>{
      const mob=document.getElementById('pm_mobile').value.trim();
      if(!/^\d{10}$/.test(mob)){ alert('Enter 10-digit mobile'); return false; }
      const otp = prompt(`Simulated OTP sent to ${mob}. Enter OTP (type 1234):`);
      if(otp !== '1234'){ alert('Invalid OTP (demo expects 1234)'); return false; }
      draft.paymentDetails = {mobile:mob};
      draft.paymentMethod = 'Paytm';
      finalizeBookingAfterPayment();
      return true;
    });
    return;
  }

  if(m.includes('hdfc') && m.includes('debit') || (m.includes('hdfc') && m.includes('card')) ){
    showPaymentModal('HDFC Debit Card', `
      <div class="field"><div class="label">Card Number</div><input id="card_num" class="input-sm" placeholder="5123 4567 8901 2345" maxlength="19"/></div>
      <div class="field"><div class="label">Expiry (MM/YY)</div><input id="card_exp" class="input-sm" placeholder="08/26"/></div>
      <div class="field"><div class="label">CVV</div><input id="card_cvv" class="input-sm" placeholder="3 digits" maxlength="4"/></div>
      <div class="small-muted">This is simulated — do not enter real card details.</div>
    `, ()=>{
      const num=document.getElementById('card_num').value.replace(/\s+/g,'');
      const exp=document.getElementById('card_exp').value.trim();
      const cvv=document.getElementById('card_cvv').value.trim();
      if(!/^\d{16}$/.test(num) || !/^\d{2}\/\d{2}$/.test(exp) || !/^\d{3,4}$/.test(cvv)){ alert('Enter simulated card details'); return false; }
      // warn if BIN not expected
      if(!num.startsWith('5123')){ if(!confirm('Card BIN not HDFC-like. Continue (simulated)?')) return false; }
      draft.paymentDetails = {cardMasked:'**** **** **** ' + num.slice(-4), expiry:exp};
      draft.paymentMethod = 'HDFC Debit Card';
      finalizeBookingAfterPayment();
      return true;
    });
    return;
  }

  if(m.includes('credit')){
    showPaymentModal('Credit Card', `
      <div class="field"><div class="label">Card Number</div><input id="cc_num" class="input-sm" placeholder="4111 1111 1111 1111" maxlength="19"/></div>
      <div class="field"><div class="label">Expiry (MM/YY)</div><input id="cc_exp" class="input-sm" placeholder="08/26"/></div>
      <div class="field"><div class="label">CVV</div><input id="cc_cvv" class="input-sm" placeholder="3 digits" maxlength="4"/></div>
    `, ()=>{
      const num=document.getElementById('cc_num').value.replace(/\s+/g,'');
      const exp=document.getElementById('cc_exp').value.trim();
      const cvv=document.getElementById('cc_cvv').value.trim();
      if(!/^\d{13,19}$/.test(num) || !/^\d{2}\/\d{2}$/.test(exp) || !/^\d{3,4}$/.test(cvv)){ alert('Enter valid simulated credit card details'); return false; }
      draft.paymentDetails = {cardMasked:'**** **** **** ' + num.slice(-4), expiry:exp};
      draft.paymentMethod = 'Credit Card';
      finalizeBookingAfterPayment();
      return true;
    });
    return;
  }

  if(m.includes('upi')){
    showUpiPayment('skyswift@upi', draft.amount, (paid)=>{
      if(paid){ draft.paymentDetails = {upi:'skyswift@upi'}; draft.paymentMethod='UPI'; finalizeBookingAfterPayment(); }
      else { bot('⚠️ UPI cancelled.'); }
    });
    return;
  }

  if(m.includes('bank') || m.includes('transfer')){
    showPaymentModal('Bank Transfer', `
      <div class="field"><div class="label">Account Number</div><input id="acc_num" class="input-sm" placeholder="123456789012" /></div>
      <div class="field"><div class="label">IFSC</div><input id="ifsc" class="input-sm" placeholder="HDFC0001234" /></div>
      <div class="small-muted">Transfer to: SkySwift Bank A/c 123456789012 IFSC HDFC0001234. Use your Ticket ID as reference. Mark as 'paid' when transfer is done.</div>
    `, ()=>{
      const acc=document.getElementById('acc_num').value.trim();
      const ifsc=document.getElementById('ifsc').value.trim();
      if(!/^\d{6,18}$/.test(acc)){ if(!confirm('Account looks unusual; proceed (simulated)?')) return false; }
      draft.paymentDetails = {accountMasked:'xxxx' + acc.slice(-4), ifsc};
      draft.paymentMethod = 'Bank Transfer';
      draft.status = 'Payment Pending (Bank Transfer)';
      bookings.push(draft); persist();
      bot('⚠️ Bank transfer saved as pending. Please update status once transfer completes.');
      draft = null; awaitingStep = null;
      return true;
    });
    return;
  }

  bot('Please choose a valid payment method: Paytm / HDFC Debit Card / Credit Card / UPI / Bank Transfer');
}

/* Payment modal helper */
function showPaymentModal(title, htmlContent, onProceed){
  paymentTitle.textContent = title;
  paymentBody.innerHTML = htmlContent;
  paymentModal.classList.add('open');
  paymentModal.setAttribute('aria-hidden','false');
  payCancel.onclick = ()=>{ paymentModal.classList.remove('open'); paymentModal.setAttribute('aria-hidden','true'); bot('Payment cancelled.'); };
  payProceed.onclick = ()=>{ try{ const ok = onProceed(); if(ok){ paymentModal.classList.remove('open'); paymentModal.setAttribute('aria-hidden','true'); } } catch(e){ alert(e.message); } };
}

/* UPI modal helper */
function showUpiPayment(upiId, amount, callback){
  upiModal.classList.add('open'); upiModal.setAttribute('aria-hidden','false');
  const uri = `upi://pay?pa=${encodeURIComponent(upiId)}&pn=SkySwift&am=${amount}&cu=INR`;
  new QRious({element: upiQR, value: uri, size:180});
  upiInfo.textContent = `UPI ID: ${upiId} · Amount: ₹${amount}`;
  upiCancel.onclick = ()=>{ upiModal.classList.remove('open'); upiModal.setAttribute('aria-hidden','true'); callback(false); };
  upiPaid.onclick = ()=>{ upiModal.classList.remove('open'); upiModal.setAttribute('aria-hidden','true'); callback(true); };
}

/* ---------------------
   finalize booking after payment
   --------------------- */
function finalizeBookingAfterPayment(){
  draft.transactionId = 'TX' + Math.random().toString(36).slice(2,10).toUpperCase();
  draft.receiptId = 'R' + Math.random().toString(36).slice(2,9).toUpperCase();
  draft.paidAt = Date.now();
  draft.status = draft.status || 'Confirmed';
  bookings.push(draft);
  // award points: 1 point per ₹1000
  loyaltyPoints += Math.floor((draft.amount||0) / 1000);
  localStorage.setItem('skyswift_points', String(loyaltyPoints));
  persist();
  bot(`✅ Booking confirmed!\nTicket: <strong>${draft.ticketId}</strong>\nPassenger: ${draft.passengerName}\nPaid: ₹${draft.amount}\nPayment: ${draft.paymentMethod}`);
  showReceiptButtons(draft);
  draft = null; awaitingStep = null;
}

/* show receipt download options */
function showReceiptButtons(b){
  const node = document.createElement('div'); node.className='receipt-box';
  node.innerHTML = `<div><strong>Receipt</strong></div><div style="margin-top:8px">
    <button class="chip" id="dlTxt">⬇️ TXT</button>
    <button class="chip" id="dlPdf">⬇️ PDF</button>
  </div>`;
  chat.appendChild(node);
  chat.scrollTop = chat.scrollHeight;
  document.getElementById('dlTxt').onclick = ()=>downloadTxt(b);
  document.getElementById('dlPdf').onclick = ()=>downloadPdf(b);
}

/* ---------------------
   Utilities: bookings, cancel, reschedule, whereIs, etc.
   --------------------- */
function persist(){ localStorage.setItem(STORAGE, JSON.stringify(bookings)); }
function showBookings(){
  if(bookings.length === 0){ bot('📂 No bookings found (local).'); return; }
  bookings.forEach(b=>{
    bot(`📑 ${b.ticketId} · ${b.passengerName} · ${b.from || '-'}→${b.to || '-'} · ${b.date || '-'} · ${b.status}`);
  });
}
function cancelTicket(id){
  if(!id){ bot('Usage: cancel T1234'); return; }
  const idx = bookings.findIndex(x=>x.ticketId === id || x.ticketId === id.toUpperCase());
  if(idx === -1){ bot(`Ticket ${id} not found.`); return; }
  bookings[idx].status = 'Cancelled';
  persist();
  bot(`✅ Ticket ${id} cancelled.`);
}
function reschedule(id){
  if(!id){ bot('Usage: reschedule T1234'); return; }
  const b = bookings.find(x=>x.ticketId === id || x.ticketId === id.toUpperCase());
  if(!b){ bot(`Ticket ${id} not found.`); return; }
  const newDate = prompt('Enter new date (DD-MM-YYYY):');
  if(!newDate){ bot('Reschedule cancelled.'); return; }
  b.date = newDate; persist(); bot(`🔄 Ticket ${b.ticketId} rescheduled to ${newDate}.`);
}
function whereIsFlight(id){
  if(!id){ bot('Provide flight or ticket id.'); return; }
  bot(`🛰️ ${id.toUpperCase()} — Status: On Time · Gate ${Math.floor(1+Math.random()*50)} · Departs in ${Math.floor(Math.random()*120)} min (simulated).`);
}
function showBaggage(){ bot('🧳 Baggage allowance: Economy 15kg | Business 25kg | Cabin 7kg. Extra ₹500 per 5kg.'); }
function showSecurity(){ bot('🛂 Security: Carry valid ID, liquids <100ml in cabin, check local rules.'); }
function showRefund(){ bot('💵 Refund policy (simulated): Full refund within 24h. After that partial/refund rules apply.'); }
function showCheckin(){ bot('🛄 Check-in: Opens 24h before departure. Online check-in is recommended.'); }
function showPromo(){ bot('🎟️ Active promos: FLY100 → ₹1000 off (demo). Type it when asked during booking.'); }

/* ---------------------
   receipt download: TXT and PDF
   --------------------- */
function downloadTxt(b){
  const txt = [
    'SkySwift — Payment Receipt',
    `Receipt ID: ${b.receiptId || ''}`,
    `Ticket ID: ${b.ticketId || ''}`,
    `Passenger: ${b.passengerName || ''}`,
    `Age: ${b.age || ''}  Gender: ${b.gender || ''}`,
    `Health: ${b.health || ''}  Pregnant: ${b.pregnancy || ''}`,
    `Route: ${b.from || ''} → ${b.to || ''}`,
    `Date/Time: ${b.date || ''} ${b.time || ''}`,
    `Seats: ${(b.seatsList||[]).join(', ')}`,
    `Amount: ₹${b.amount || ''}`,
    `Payment: ${b.paymentMethod || ''}`,
    `Transaction: ${b.transactionId || ''}`,
    `Paid At: ${b.paidAt ? new Date(b.paidAt).toLocaleString() : ''}`
  ].join('\n');
  const blob = new Blob([txt], {type:'text/plain'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href = url; a.download = `receipt_${b.receiptId||b.ticketId}.txt`; a.click();
  setTimeout(()=>URL.revokeObjectURL(url),2000);
}

/* PDF: styled with header, sections. Replace logoDataUrl with your base64 PNG to embed a logo in the top-left. */
async function downloadPdf(b){
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({unit:'pt', format:'a4'});
  const left = 36; let y = 40;

  // Optional logo: set logoDataUrl to a data URL string if you want to embed
  const logoDataUrl = ''; // e.g., 'data:image/png;base64,...' — replace with your own base64 if desired
  // header bar
  doc.setFillColor(59,130,246); doc.rect(0,0,595,56,'F');
  doc.setFontSize(18); doc.setTextColor(255,255,255);
  doc.text('SkySwift Airlines', left, 36);
  if(logoDataUrl){
    try{ doc.addImage(logoDataUrl, 'PNG', 520, 10, 40, 36); }catch(e){ /* ignore image errors */ }
  } else {
    doc.setFontSize(14); doc.text('✈️', 520, 36);
  }

  y += 36;
  doc.setFontSize(12); doc.setTextColor(0,0,0);

  // passenger
  doc.setFontSize(13); doc.setTextColor(14,74,120); doc.text('Passenger Details', left, y); y+=18;
  doc.setFontSize(11); doc.setTextColor(0,0,0);
  doc.text(`Name: ${b.passengerName || ''}`, left, y); y+=14;
  doc.text(`Age: ${b.age || ''}   Gender: ${b.gender || ''}`, left, y); y+=14;
  doc.text(`Health: ${b.health || ''}`, left, y); y+=14;
  doc.text(`Pregnant: ${b.pregnancy || ''}`, left, y); y+=20;

  // flight
  doc.setFontSize(13); doc.setTextColor(14,74,120); doc.text('Flight Details', left, y); y+=18;
  doc.setFontSize(11); doc.setTextColor(0,0,0);
  doc.text(`Ticket: ${b.ticketId || ''}`, left, y); y+=14;
  doc.text(`Route: ${b.from || ''} → ${b.to || ''}`, left, y); y+=14;
  doc.text(`Date/Time: ${b.date || ''} ${b.time || ''}`, left, y); y+=14;
  doc.text(`Seats: ${(b.seatsList||[]).join(', ')}`, left, y); y+=20;

  // payment
  doc.setFontSize(13); doc.setTextColor(14,74,120); doc.text('Payment', left, y); y+=18;
  doc.setFontSize(11); doc.setTextColor(0,0,0);
  doc.text(`Amount Paid: ₹${b.amount || ''}`, left, y); y+=14;
  doc.text(`Method: ${b.paymentMethod || ''}`, left, y); y+=14;
  doc.text(`Transaction: ${b.transactionId || ''}`, left, y); y+=14;
  doc.text(`Receipt: ${b.receiptId || ''}`, left, y); y+=20;

  doc.setFontSize(10); doc.setTextColor(120,120,120);
  doc.text('Thank you for booking with SkySwift — safe travels! ✈️', left, y);

  doc.save(`receipt_${b.receiptId||b.ticketId}.pdf`);
}

/* ---------------------
   Weather (Open-Meteo, no key)
   --------------------- */
async function fetchWeather(city){
  try{
    const g = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(city)}&count=1`).then(r=>r.json());
    if(!g || !g.results || !g.results.length){ bot(`🌦️ Could not locate city: ${city}`); return; }
    const {latitude, longitude, name, country} = g.results[0];
    const w = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`).then(r=>r.json());
    if(!w || !w.current_weather){ bot(`🌦️ Weather not available for ${name}`); return; }
    const cw = w.current_weather;
    bot(`🌦️ Weather in ${name}, ${country}: ${cw.temperature}°C, wind ${cw.windspeed} km/h (Open-Meteo).`);
  }catch(e){ bot('⚠️ Weather lookup failed (network).'); }
}

/* ---------------------
   Misc helpers: selectFlight (stub), load storage 
   --------------------- */
function selectFlight(parts){
  // placeholder - in this demo we use booking flow instead of real flight selection
  bot('Flight selection is simulated. Use "book" to start full booking flow.');
}

/* ---------------------
   Initialize: load saved bookings
   --------------------- */
(function init(){
  const stored = JSON.parse(localStorage.getItem(STORAGE) || '[]'); bookings = stored;
  const pts = parseInt(localStorage.getItem('skyswift_points') || '0',10) || 0; loyaltyPoints = pts;
})();

/* ---------------------
   Cancel / where / reschedule wrappers available globally
   --------------------- */
window.cancelTicket = cancelTicket;
window.reschedule = reschedule;
window.whereIsFlight = whereIsFlight;
window.showBookings = showBookings;


  
// ===== Enhanced Dummy OTP Logic =====
const _originalHandlePaymentChoice = typeof handlePaymentChoice !== 'undefined' ? handlePaymentChoice : null;

function handlePaymentChoice(method) {
  if (/card/i.test(method)) {
    bot("💳 Please enter your card details (e.g., 1234 5678 9012 3456 MM/YY CVV).");
    awaitingStep = "cardDetails";
    return;
  }
  if (_originalHandlePaymentChoice) _originalHandlePaymentChoice(method);
}

// Extend booking flow to handle card details and OTP
const _originalHandleBookingFlow = typeof handleBookingFlow !== 'undefined' ? handleBookingFlow : null;

handleBookingFlow = function(text) {
  const t = text.trim();
  if (awaitingStep === "cardDetails") {
    if (!/\d{12,19}/.test(t)) {
      bot("⚠️ Please enter valid card details (numbers only).");
      return;
    }
    bot("📩 Sending OTP to your registered mobile number...");
    setTimeout(() => {
      const otp = "1234";
      bot(`✅ OTP sent! Please enter the OTP sent to your mobile: <b>${otp}</b>`);
      awaitingStep = "otpEntry";
    }, 2000);
    return;
  }
  if (awaitingStep === "otpEntry") {
    if (t === "1234") {
      bot("✅ OTP verified successfully. Processing your payment...");
      setTimeout(() => {
        if (typeof completeBooking === 'function') completeBooking();
        else bot("💰 Payment successful. Booking confirmed!");
      }, 1500);
    } else {
      bot("❌ Incorrect OTP. Please try again (hint: 1234).");
    }
    return;
  }
  if (_originalHandleBookingFlow) _originalHandleBookingFlow(text);
};
// ===== End Enhanced Dummy OTP Logic =====

function generateTicketPDF(order) {
  try {
    if(!order) order = window.store && window.store.order;
    if(!order) { console.warn('No order found for PDF generation'); return; }

    // Create QR content: include PNR, passenger name, flight no, date, route
    const qrText = `PNR:${order.pnr}|Name:${order.passenger?.fn || ''} ${order.passenger?.ln || ''}|Flight:${order.airline} ${order.flightNo}|Date:${order.date}|Route:${order.from}->${order.to}`;
    // generate QR using QRious to a dataURL
    const qr = new QRious({ value: qrText, size: 200 });
    const qrDataUrl = qr.toDataURL();

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF({unit:'pt', format:'a4'});

    const left = 40;
    let y = 60;
    doc.setFontSize(20);
    doc.text('SkySwift — E‑Ticket', left, y);
    y += 28;

    doc.setFontSize(11);
    doc.text(`PNR: ${order.pnr}`, left, y); y += 16;
    doc.text(`Passenger: ${order.passenger?.fn || ''} ${order.passenger?.ln || ''}`, left, y); y += 14;
    if(order.passenger?.em) { doc.text(`Email: ${order.passenger.em}`, left, y); y += 14; }
    doc.text(`Route: ${order.from} → ${order.to}`, left, y); y += 14;
    doc.text(`Flight: ${order.airline} ${order.flightNo}`, left, y); y += 14;
    doc.text(`Date: ${order.date}   Time: ${order.depart} → ${order.arrival}`, left, y); y += 14;
    const seatsText = (order.seats && order.seats.length) ? order.seats.join(', ') : 'Auto-assigned';
    doc.text(`Seats: ${seatsText}`, left, y); y += 16;
    if(order.cabin) { doc.text(`Cabin: ${order.cabin}`, left, y); y += 14; }
    doc.text(`Total Fare: ${order.total ? '₹' + order.total.toLocaleString('en-IN') : ''}`, left, y); y += 26;

    // Add QR on the right
    const qrX = 400; const qrY = 90; const qrSize = 120;
    // addImage: (imageData, format, x, y, width, height)
    doc.addImage(qrDataUrl, 'PNG', qrX, qrY, qrSize, qrSize);

    doc.setFontSize(10);
    doc.text('Generated by SkySwift demo. This is an auto-generated ticket.', left, y);

    // Save PDF
    doc.save(`Ticket_${order.pnr}.pdf`);
  } catch (e) {
    console.error('generateTicketPDF error', e);
    alert('Failed to generate PDF ticket. See console for details.');
  }
}

// add Download button on confirmation screen (if not present)
function ensureDownloadButton() {
  try {
    const conf = document.getElementById('confirmation');
    if(!conf) return;
    if(document.getElementById('downloadTicketBtn')) return;
    const btn = document.createElement('button');
    btn.id = 'downloadTicketBtn';
    btn.className = 'btn';
    btn.style.marginTop = '12px';
    btn.textContent = 'Download Ticket (PDF)';
    btn.onclick = function(){
      // use store.order if available
      const order = window.store && window.store.order ? window.store.order : window.order || null;
      if(!order) {
        // try to read from localStorage last trip
        const trips = JSON.parse(localStorage.getItem('skyswift_trips')||'[]');
        const last = trips[trips.length-1];
        if(last) generateTicketPDF(last);
        else alert('No booking found to download.');
        return;
      }
      generateTicketPDF(order);
    };
    // place button inside confirmation card
    const card = conf.querySelector('.card');
    if(card) card.appendChild(btn);
  } catch(e){ console.warn(e); }
}

// Ensure button exists when confirmation page is shown
document.addEventListener('click', function(e){
  // if navTo called with '#confirmation', ensure button
  if(e.target && e.target.getAttribute && e.target.getAttribute('href') === '#confirmation') {
    setTimeout(ensureDownloadButton, 120);
  }
});
window.addEventListener('DOMContentLoaded', function(){
  setTimeout(ensureDownloadButton, 400);
});

// also call generateTicketPDF automatically when booking completes -- patch existing navTo call if needed
// (Some existing code already attempts to call it; this is a safe double-call guard)